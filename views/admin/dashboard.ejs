<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>
    <%= title %>
  </title>


  <!-- Style CSS -->
  <link rel="stylesheet" href="/css/admin_side_view.css">
  <link href="//maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" rel="stylesheet" id="bootstrap-css">
  <script src="//maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"
    integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
  <link href="https://use.fontawesome.com/releases/v5.0.6/css/all.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/gh/gitbrent/bootstrap4-toggle@3.6.1/css/bootstrap4-toggle.min.css"
    rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/gh/gitbrent/bootstrap4-toggle@3.6.1/js/bootstrap4-toggle.min.js"></script>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
  <link rel="stylesheet" href="https://cdn.datatables.net/1.13.7/css/jquery.dataTables.css" />
  <script src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.js"></script>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>


  <style>
    body {
      margin: 0;
      padding: 0;
    }

    .custom-div {
      margin: 20px;
      border: 1px solid black;
      box-sizing: border-box;
      /* Include border and padding in the total width and height */
    }

    .btn-dark a {
      color: white;
      text-decoration: none;
    }

    .btn-dark a:hover {
      text-decoration: none;
      /* Remove underline on hover */
    }

    h3 {
      text-align: center;
      margin-bottom: 30px;
    }

    table {
      width: 100%;
      border-collapse: inherit;
    }

    th,
    td {
      padding: 8px;
      text-align: left;
    }

    .formdiv {
      margin-top: 1em;
    }

    .divall {
      width: 100%;
      border-radius: 3px;
    }

    .navstyle {
      background-color: rgba(255, 255, 255, 0.194)
    }

    /* ... (unchanged styles) ... */

    .card {
      border: none;
      border-radius: 8px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .coupon-form {
      background-color: #fff;
      padding: 20px;
    }

    .apply-btn {
      width: 100%;
      padding: 10px;
      background-color: #fb641b;
      /* Flipkart orange color */
      color: #fff;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
  </style>

</head>

<body>
  <%- include('include/admin_nav_bar_main') %>
    <div class="custom-div">
      <!-- Your content goes here -->
      <div class="container mt-5">
        <div class="row">
          <div class="col-md-6">
            <h2>
              <%= title %>
            </h2>
          </div>
          <!--  -->
        </div>
        <!--  -->

        <div class="card coupon-form w-100 mx-auto p-0 overflow-auto">
          <main class="col-md-8 col-lg-10">
            <div class="custom-border maindiv p-5">
              <label for="chartSelector" class="font-weight-bold">Select Chart:</label>
              <select id="chartSelector" class="form-control mb-3" onchange="updateChart()">
                <option value="mychart1">Weekly Chart</option>
                <option value="mychart2">Monthly Chart</option>
                <option value="mychart3">Yearly Chart</option>
              </select>

              <div class="chart-container col-md-8 col-lg-9">
                <canvas id="mychart1" data-dates="<%= JSON.stringify(dates) %>"
                  data-dailyOrder="<%=JSON.stringify(orderCounts)%>"></canvas>
                <canvas id="mychart2" data-monthly="<%= JSON.stringify(monthdata) %>"></canvas>
                <canvas id="mychart3" data-yearlyOrders="<%=JSON.stringify(totalOrderCount3)%>"></canvas>
              </div>

              <div class="card-body">
                <div class="chart-pie  ">
                  <div class="row">
                    <div class="col">
                      <input type="date" name="startingdate" id="startingDate" class="form-control" required>
                      <div id="startingDateError" style="color: red;"></div>
                    </div>
                    <div class="col">
                      <input type="date" name="endingdate" id="endingDate" class="form-control" required>
                      <div id="endingDateError" style="color: red;"></div>
                    </div>
                  </div>
                  <br>
                  <button class="btn btn-primary btn-block mb-" onclick="generateReport('pdf')">PDF Report</button>
                  <button class="btn btn-primary btn-block" onclick="generateReport('excel')">Excel Report</button>
                </div>
              </div>
            </div>
          </main>
        </div>

      </div>
    </div>
</body>

<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.1/dist/umd/popper.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script>
  function logout() {
    const result = confirm('Are You Sure You Want to Logout?');
    if (result == false) {
      event.preventDefault();
    }
  }
</script>

<script>
  document.addEventListener("DOMContentLoaded", function () {

    const chart1Container = document.querySelector('#mychart1');
    const rawDates = chart1Container.getAttribute('data-dates');
    const dates = JSON.parse(rawDates);
    const rawDailyOrders = chart1Container.getAttribute('data-dailyOrder');
    const dailyOrders = JSON.parse(rawDailyOrders);

    const orderEndDate = moment(dates[dates.length - 1]); // Use the last order date as the end date
    const lastSevenDays = [];
    let orders = [];

    // Generate labels for the last 7 days from the current date
    for (let i = 6; i >= 0; i--) {
      const date = orderEndDate.clone().subtract(i, 'days').format('YYYY-MM-DD');
      let index = dates.indexOf(date);
      if (index !== -1) {
        orders.push(dailyOrders[index]);
      } else {
        orders.push(0);
      }
      lastSevenDays.push(date);
    }

    const ctx1 = document.getElementById('mychart1').getContext('2d');
    const masspopchart1 = new Chart(ctx1, {
      type: 'bar',
      data: {
        labels: lastSevenDays,
        datasets: [{
          label: 'Weekly Orders',
          data: orders,
          backgroundColor: 'rgba(0, 123, 225, 1)',
          barThickness: 20
        }]
      },
      options: {
        animation: {
          duration: 2000,
          easing: 'easeInOutQuart',
          onProgress: function (animation) {
            console.log("progress", animation.progress);
          },
          onComplete: function (animation) {
            console.log('Animation complete');
          }
        }
      }
    });


    // Chart 2




    document.getElementById("mychart2").style.display = "none";
    const monthlyOrderContainer = document.querySelector('#mychart2');

    // Use getAttribute to retrieve the values
    const rawMonthlyOrders = monthlyOrderContainer.getAttribute('data-monthly');

    const monthlyData = JSON.parse(rawMonthlyOrders);

    // Get the current year and month
    const currentDate = new Date();
    const currentYear1 = currentDate.getFullYear();
    const currentMonth = currentDate.getMonth() + 1; // Months are zero-based

    // Generate labels for the next 12 months starting from the current month
    const monthlyLabels = Array.from({ length: 12 }, (_, index) => {
      const year = currentMonth + index > 12 ? currentYear1 + 1 : currentYear1;
      const month = (currentMonth + index) % 12 || 12;
      return `${year}-${month.toString().padStart(2, '0')}`;
    });

    const ctx = document.getElementById('mychart2').getContext('2d');

    let masspopchart2 = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: monthlyLabels,
        datasets: [{
          label: 'Monthly Orders',
          data: monthlyData,
          backgroundColor: 'rgba(0, 0, 255, 0.3)',
          barThickness: 20
        }]
      },
      options: {
        animation: {
          duration: 2000,
          easing: 'easeInOutQuart',
          onProgress: function (animation) {
            console.log(animation.progress);
          },
          onComplete: function (animation) {
            console.log('Animation complete');
          }
        },
        scales: {
          x: {
            type: 'category',
            labels: monthlyLabels,
            ticks: {
              autoSkip: false,
              maxRotation: 45,
            }
          },
          y: {
            beginAtZero: true,
          }
        }
      }
    });

    // Chart 3
    const chart3Container = document.querySelector('#mychart3');
    document.getElementById("mychart3").style.display = "none";
    const rawYearlyOrders = chart3Container.getAttribute('data-yearlyOrders');
    const yearlyOrders = rawYearlyOrders.split(',').map(Number);

    const currentYear = new Date().getFullYear();

    const yearlyLabels = Array.from({ length: 5 }, (_, index) => currentYear + index);

    const ctx3 = document.getElementById('mychart3').getContext('2d');

    let masspopchart3 = new Chart(ctx3, {
      type: 'bar',
      data: {
        labels: yearlyLabels,
        datasets: [{
          label: 'Yearly Orders',
          data: yearlyOrders,
          backgroundColor: ['rgba(144, 238, 144, 20)'],
          barThickness: 20
        }]
      },
      options: {
        animation: {
          duration: 2000,
          easing: 'easeInOutQuart',
          onProgress: function (animation) {
            console.log(animation.progress);
          },
          onComplete: function (animation) {
            console.log('Animation complete');
          }
        },
        scales: {
          x: {
            type: 'category',
            labels: yearlyLabels.map(String),
            ticks: {
              autoSkip: false,
              maxRotation: 45,
            }
          },
          y: {
            beginAtZero: true,
          }
        }
      }
    });
  });

  function updateChart() {
    var selectedChart = document.getElementById("chartSelector").value;

    // Hide all charts
    document.getElementById("mychart1").style.display = "none";
    document.getElementById("mychart2").style.display = "none";
    document.getElementById("mychart3").style.display = "none";

    // Show the selected chart
    document.getElementById(selectedChart).style.display = "block";
  }

</script>

<script>
  function generateReport(reportType) {
    const startingDate = document.getElementById('startingDate').value;
    const endingDate = document.getElementById('endingDate').value;

    // Reset error messages
    document.getElementById('startingDateError').innerHTML = '';
    document.getElementById('endingDateError').innerHTML = '';

    // Check if either starting or ending date is empty
    if (!startingDate) {
      document.getElementById('startingDateError').innerHTML = 'Starting date is required';
      return;
    }

    if (!endingDate) {
      document.getElementById('endingDateError').innerHTML = 'Ending date is required';
      return;
    }

    // Check if the ending date is before the starting date
    const startDateObj = new Date(startingDate);
    const endDateObj = new Date(endingDate);

    if (endDateObj < startDateObj) {
      document.getElementById('endingDateError').innerHTML = 'Ending date cannot be before starting date';
      return;
    }

    // If validation passes, redirect to the appropriate report generation route
    if (reportType === 'pdf') {
      window.location.href = `/admin/generate-pdf?startingdate=${startingDate}&endingdate=${endingDate}`;
    } else if (reportType === 'excel') {
      window.location.href = `/admin/salesreport?startingdate=${startingDate}&endingdate=${endingDate}`;
    }
  }
</script>

</html>