<!DOCTYPE html>
<html lang="en">

<head>
   <meta charset="utf-8">
   <meta name="viewport" content="width=device-width, initial-scale=1">
   <title>
      <%= title %>
   </title>


   <!-- Style CSS -->
   <link rel="stylesheet" href="/css/admin_side_view.css">

   <link href="//maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" rel="stylesheet" id="bootstrap-css">
   <script src="//maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
   <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>

   <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"
      integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
   <link href="https://use.fontawesome.com/releases/v5.0.6/css/all.css" rel="stylesheet">

   <link href="https://fonts.googleapis.com/css2?family=Montserrat&family=Roboto&display=swap" rel="stylesheet">
   <!-- font awesome cdn -->
   <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">

  
   
   <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
   <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">

   <style>
      body {
         margin: 0;
         padding: 0;
      }

      .custom-div {
         margin: 20px;
         border: 1px solid black;
         box-sizing: border-box;
         /* Include border and padding in the total width and height */
      }

      .btn-dark a {
         color: white;
         text-decoration: none;
      }

      .btn-dark a:hover {
         text-decoration: none;
         /* Remove underline on hover */
      }

      .image-container {
         display: inline-block;
         margin-right: 10px;
      }

      .image-container img {
         max-width: 100%;
         height: auto;
      }

      .remove-button {
         display: block;
         margin-top: 5px;
         cursor: pointer;
         color: red;
         color: aliceblue;
         width: 16vh;
      }

      .save-button {
         display: block;
         margin-top: 5px;
         width: 16vh;

      }
   </style>

</head>

<body>

      <!-- Modal ADD PRODUCT-->
      <div class="container d-flex align-items-center justify-content-center" style="min-height: calc(100vh - 4em);"
         id="add-product">
         <div class="add_product_div">
            <% if(typeof message !=='undefined' && message !==null) { %>
               <div class="alert alert-danger text-center rounded-0 mt-1 mb-1 ms-2 me-2 fs-6">
                  <%= message %>
               </div>
               <% } %>
                  <h5 class="modal-title" id="exampleModalLongTitle"><%= title %></h5>
                  <form action="/admin/add_product" method="POST" class="pt-3 text-center"
                     enctype="multipart/form-data">
                     <input type="hidden" id="product_id" name="product_id" value="<%= serialNumber%>">
                     <input type="text" class="form-control mb-4 rounded-0" value="<%= serialNumber%>"
                        style="font-size: 75%;" maxlength="10" disabled>
                     <input type="text" class="form-control mb-4 rounded-0" placeholder="PRODUCT NAME"
                        oninput="dontAllowSpace(this)" style="font-size: 75%;" name="product_name">
                     <input type="text" class="form-control mb-4 rounded-0" placeholder="SKU"
                        oninput="dontAllowSpace(this)" style="font-size: 75%;" name="sku">
                     <input type="text" class="form-control mb-4 rounded-0" placeholder="PRICE"
                        oninput="dontAllowCharAndSpace(this)" style="font-size: 75%;" name="price">
                     <input type="text" class="form-control mb-4 rounded-0" placeholder="QUANTITY"
                        oninput="dontAllowCharAndSpace(this)" style="font-size: 75%;" name="quantity">
                     <div
                        class="form-control form-switch mb-4 rounded-0 d-flex align-items-center justify-content-start"
                        style="font-size: 75%; height: 50px;">
                        <label class="form-check-label " for="flexSwitchCheckChecked"
                           style="margin-left: 35px; font-size: 12px; font-weight: bold;">STOCK CHECK</label>
                        <input class="form-check-input" type="checkbox" id="stock_flag" name="stock_flag"
                           style="width: 25px; height: 25px; margin-left: 0px;">
                     </div>
                     <select class="form-select form-control mb-4 rounded-0" style="font-size: 75%;" name="category_id">
                        <!-- Add your options here -->
                        <% categoryDetails.forEach(function(categoryDetail, index) { %>
                           <option value="<%= categoryDetail._id %>">
                              <%= categoryDetail.category %>_
                                 <%= categoryDetail.sub_category %>_
                                    <%= categoryDetail.brand %>
                           </option>
                           <% }); %>
                     </select>
                     <div class="mb-3">
                        <label for="UrunImage" class="form-label">PRODUCT IMAGE</label>
                        <input name="img" type="file" multiple class="form-control w-100" id="image">
                        <div id="image-container" class="mb-5 mt-5"></div>
                        <div id="cropper-container" class="mt-3 mb-5"></div>
                        <br> <span id="validationMessage" style="color: red;"></span>
                     </div>
                     <button type="submit" style="background-color: #C2B96C;">+ PRODUCT</button>
                  </form>
         </div>
      </div>
      <!-- Add script for initializing Cropper.js -->
      <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
</body>
<script>
   function logout() {
      const result = confirm('Are You Sure You Want to Logout?');
      if (result == false) {
         event.preventDefault();
      }
   }
   function dontAllowChar(input) {
      // Remove non-digit characters from the input
      input.value = input.value.replace(/\D/g, '');
   }
   function dontAllowCharAndSpace(input) {
      // Remove non-digit characters from the input
      input.value = input.value.trim();
      input.value = input.value.replace(/\D/g, '');
   }
   function dontAllowSpace(input) {
      // Remove non-digit characters from the input
      input.value = input.value.trim();
   }
   // Listen for the popstate event (triggered when the back or forward button is pressed)
   window.addEventListener('popstate', function (event) {
      // Redirect to /admin/product_list
      window.location.href = '/admin/product_list';
   });
   // Function to navigate to /admin/product_list when the page loads
   function redirectToProductList() {
      window.history.pushState(null, null, '/admin/product_list');
   }
   // Call the function when the page loads
   window.onload = redirectToProductList;
</script>
<script>
   // MULTIPLE IMAGE SUPPORT WITH CROPPING
   const imageContainer = document.getElementById('image-container');
   let croppers = [];
   let croppedImagesData = []; // Array to store cropped image data
   let isSaveClicked = false; // Flag to track if the Save button is clicked

   document.getElementById('image').addEventListener('change', (event) => {
      const files = event.target.files;

      for (const file of files) {
         const reader = new FileReader();

         reader.onload = (event) => {
            const image = new Image();
            image.src = event.target.result;

            image.onload = () => {
               const containerDiv = document.createElement('div');
               containerDiv.className = 'image-container';

               const imageElement = document.createElement('img');
               imageElement.src = image.src;
               containerDiv.appendChild(imageElement);

               // Set a fixed height for the container
               containerDiv.style.height = '150px';

               // Create a new Cropper for each image without a fixed aspect ratio
               const cropper = new Cropper(imageElement, {
                  aspectRatio: NaN, // Allow freeform cropping
                  viewMode: 1, // Set the cropping mode (0: freeform, 1: restrict to the aspect ratio)
               });

               // Create a "Save" button for each image
               const saveButton = document.createElement('button');
               saveButton.className = 'btn btn-success save-button';
               saveButton.textContent = 'Save';
               saveButton.addEventListener('click', () => {
                  // Get the cropped image data for the specific cropper
                  const croppedCanvas = cropper.getCroppedCanvas();
                  const croppedImageData = croppedCanvas.toDataURL('image/jpeg');
                  console.log("IMG_DATA", croppedImageData);
                  // Store cropped image data in the array
                  croppedImagesData.push(croppedImageData);

                  // Optionally, you can remove the "Save" button after saving
                  containerDiv.removeChild(saveButton);

                  // Set the flag to indicate that Save button is clicked
                  isSaveClicked = true;
               });

               // Create a "Remove" button for each image
               const removeButton = document.createElement('button');
               removeButton.className = 'btn btn-danger remove-button';
               removeButton.textContent = 'Remove';
               removeButton.addEventListener('click', () => {
                  // Remove the corresponding image and cropper
                  const index = croppers.indexOf(cropper);
                  if (index !== -1) {
                     croppers.splice(index, 1);
                     croppedImagesData.splice(index, 1);
                  }
                  containerDiv.remove();

                  // Reset the flag if there are no images left
                  if (croppers.length === 0) {
                     isSaveClicked = false;
                  }
               });

               containerDiv.appendChild(saveButton);
               containerDiv.appendChild(removeButton);

               imageContainer.appendChild(containerDiv);
               croppers.push(cropper);
            };
         };

         reader.readAsDataURL(file);
      }
   });

   // Handle form submission (for adding product)
   document.querySelector('form').addEventListener('submit', async (event) => {
      // Prevent form submission if Save button is not clicked
      if (!isSaveClicked) {
         event.preventDefault();
         // Show validation message
         document.getElementById('validationMessage').textContent = 'Please save the image first.';
      } else {
         console.log("CROPPED_IMAGES", croppedImagesData);
         // Add the cropped image data to the form data
         croppedImagesData.forEach((croppedImageData, index) => {
            const hiddenInput = document.createElement('input');
            hiddenInput.type = 'hidden';
            hiddenInput.name = `croppedImages[${index}]`;
            hiddenInput.value = croppedImageData;
            document.querySelector('form').appendChild(hiddenInput);
         });

         // Optionally, you can also reset the croppers and image containers
         resetCroppersAndContainers();
      }
   });

   // Function to reset croppers and containers
   function resetCroppersAndContainers() {
      // Reset the croppers array
      croppers = [];

      // Remove all child elements from the imageContainer
      while (imageContainer.firstChild) {
         imageContainer.removeChild(imageContainer.firstChild);
      }

      // Clear the file input
      const fileInput = document.getElementById('image');
      fileInput.value = '';

      // Clear the cropped image data array
      croppedImagesData = [];

      // Reset the Save button click flag
      isSaveClicked = false;

      // Clear the validation message
      document.getElementById('validationMessage').textContent = '';
   }
</script>

</html>